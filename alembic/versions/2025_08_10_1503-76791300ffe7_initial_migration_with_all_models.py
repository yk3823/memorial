"""Initial migration with all models

Revision ID: 76791300ffe7
Revises: 
Create Date: 2025-08-10 15:03:16.221012

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '76791300ffe7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('psalm_verses',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False, comment='Verse number (1-176)'),
    sa.Column('hebrew_letter', sa.String(length=10), nullable=False, comment='Hebrew letter for this section (א, ב, ג, etc.)'),
    sa.Column('hebrew_letter_name', sa.String(length=20), nullable=False, comment='Name of the Hebrew letter (Aleph, Bet, Gimel, etc.)'),
    sa.Column('verse_in_section', sa.Integer(), nullable=False, comment='Position within the 8-verse Hebrew letter section'),
    sa.Column('verse_number', sa.Integer(), nullable=False, comment='Verse number within Psalm 119 (1-176)'),
    sa.Column('verse_text_hebrew', sa.Text(), nullable=False, comment='Verse text in Hebrew with vowels (נקודות)'),
    sa.Column('verse_text_hebrew_no_vowels', sa.Text(), nullable=True, comment='Verse text in Hebrew without vowels'),
    sa.Column('verse_text_english', sa.Text(), nullable=False, comment='Verse text in English translation'),
    sa.Column('verse_text_transliteration', sa.Text(), nullable=False, comment='Hebrew text transliterated to English characters'),
    sa.Column('verse_text_spanish', sa.Text(), nullable=True, comment='Verse text in Spanish translation'),
    sa.Column('verse_text_french', sa.Text(), nullable=True, comment='Verse text in French translation'),
    sa.Column('verse_text_russian', sa.Text(), nullable=True, comment='Verse text in Russian translation'),
    sa.Column('themes', sa.String(length=500), nullable=True, comment='Comma-separated themes/topics for this verse'),
    sa.Column('keywords', sa.String(length=500), nullable=True, comment='Comma-separated keywords for searching'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='Number of times this verse has been associated with memorials'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.CheckConstraint('usage_count >= 0', name='ck_psalm_usage_count_non_negative'),
    sa.CheckConstraint('verse_in_section >= 1 AND verse_in_section <= 8', name='ck_psalm_verse_in_section_range'),
    sa.CheckConstraint('verse_number >= 1 AND verse_number <= 176', name='ck_psalm_verse_number_range'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_psalm_english_text_search', 'psalm_verses', ['verse_text_english'], unique=False, postgresql_using='gin', postgresql_ops={'verse_text_english': 'gin_trgm_ops'})
    op.create_index('ix_psalm_hebrew_letter', 'psalm_verses', ['hebrew_letter', 'verse_in_section'], unique=False)
    op.create_index('ix_psalm_hebrew_text_search', 'psalm_verses', ['verse_text_hebrew'], unique=False, postgresql_using='gin', postgresql_ops={'verse_text_hebrew': 'gin_trgm_ops'})
    op.create_index('ix_psalm_keywords', 'psalm_verses', ['keywords'], unique=False, postgresql_using='gin', postgresql_ops={'keywords': 'gin_trgm_ops'})
    op.create_index('ix_psalm_letter_name', 'psalm_verses', ['hebrew_letter_name'], unique=False)
    op.create_index('ix_psalm_themes', 'psalm_verses', ['themes'], unique=False, postgresql_using='gin', postgresql_ops={'themes': 'gin_trgm_ops'})
    op.create_index('ix_psalm_usage_count', 'psalm_verses', ['usage_count'], unique=False)
    op.create_index('ix_psalm_verse_number', 'psalm_verses', ['verse_number'], unique=True)
    op.create_index(op.f('ix_psalm_verses_created_at'), 'psalm_verses', ['created_at'], unique=False)
    op.create_index(op.f('ix_psalm_verses_hebrew_letter'), 'psalm_verses', ['hebrew_letter'], unique=False)
    op.create_index(op.f('ix_psalm_verses_hebrew_letter_name'), 'psalm_verses', ['hebrew_letter_name'], unique=False)
    op.create_index(op.f('ix_psalm_verses_is_deleted'), 'psalm_verses', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_psalm_verses_updated_at'), 'psalm_verses', ['updated_at'], unique=False)
    op.create_index(op.f('ix_psalm_verses_verse_number'), 'psalm_verses', ['verse_number'], unique=True)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address (unique)"),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Hashed password using Werkzeug'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment="User's first name"),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment="User's last name"),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment="User's phone number"),
    sa.Column('hebrew_name', sa.String(length=100), nullable=True, comment="User's Hebrew name (optional)"),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the user account is active'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment="Whether the user's email is verified"),
    sa.Column('verification_token', sa.String(length=255), nullable=True, comment='Token for email verification'),
    sa.Column('reset_password_token', sa.String(length=255), nullable=True, comment='Token for password reset'),
    sa.Column('reset_password_expires_at', sa.DateTime(timezone=True), nullable=True, comment='Password reset token expiration time'),
    sa.Column('subscription_status', sa.Enum('TRIAL', 'ACTIVE', 'EXPIRED', 'CANCELLED', name='subscriptionstatus'), nullable=False, comment="User's subscription status"),
    sa.Column('subscription_end_date', sa.Date(), nullable=True, comment='When the subscription expires'),
    sa.Column('trial_end_date', sa.Date(), nullable=True, comment='When the trial period ends'),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='userrole'), nullable=False, comment="User's role for authorization"),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='Last successful login timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Total number of successful logins'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reset_password_token'),
    sa.UniqueConstraint('verification_token')
    )
    op.create_index('ix_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('ix_user_reset_token', 'users', ['reset_password_token'], unique=True, postgresql_where='reset_password_token IS NOT NULL')
    op.create_index('ix_user_role_active', 'users', ['role', 'is_active'], unique=False)
    op.create_index('ix_user_subscription_status', 'users', ['subscription_status', 'subscription_end_date'], unique=False)
    op.create_index('ix_user_verification_token', 'users', ['verification_token'], unique=True, postgresql_where='verification_token IS NOT NULL')
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_is_verified'), 'users', ['is_verified'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_subscription_status'), 'users', ['subscription_status'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_table('memorials',
    sa.Column('owner_id', sa.UUID(), nullable=False, comment='ID of the user who owns this memorial'),
    sa.Column('deceased_name_hebrew', sa.String(length=200), nullable=False, comment='Name of the deceased in Hebrew'),
    sa.Column('deceased_name_english', sa.String(length=200), nullable=True, comment='Name of the deceased in English (optional)'),
    sa.Column('birth_date_gregorian', sa.Date(), nullable=True, comment='Birth date in Gregorian calendar'),
    sa.Column('birth_date_hebrew', sa.String(length=50), nullable=True, comment='Birth date in Hebrew calendar (formatted string)'),
    sa.Column('death_date_gregorian', sa.Date(), nullable=True, comment='Death date in Gregorian calendar'),
    sa.Column('death_date_hebrew', sa.String(length=50), nullable=True, comment='Death date in Hebrew calendar (formatted string)'),
    sa.Column('yahrzeit_date_hebrew', sa.String(length=50), nullable=True, comment='Yahrzeit date in Hebrew calendar (11 months after death)'),
    sa.Column('next_yahrzeit_gregorian', sa.Date(), nullable=True, comment='Next yahrzeit date in Gregorian calendar for reminders'),
    sa.Column('biography', sa.Text(), nullable=True, comment='Biography and life story of the deceased'),
    sa.Column('memorial_song_url', sa.String(length=500), nullable=True, comment='URL to memorial song or audio file'),
    sa.Column('is_locked', sa.Boolean(), nullable=False, comment='Whether the memorial is locked from editing'),
    sa.Column('is_public', sa.Boolean(), nullable=False, comment='Whether the memorial is publicly viewable'),
    sa.Column('page_views', sa.Integer(), nullable=False, comment='Number of times the memorial page has been viewed'),
    sa.Column('unique_slug', sa.String(length=100), nullable=True, comment='Unique URL slug for public memorial page access'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_memorial_death_date', 'memorials', ['death_date_gregorian'], unique=False, postgresql_where='death_date_gregorian IS NOT NULL')
    op.create_index('ix_memorial_name_search', 'memorials', ['deceased_name_hebrew', 'deceased_name_english'], unique=False)
    op.create_index('ix_memorial_owner_public', 'memorials', ['owner_id', 'is_public'], unique=False)
    op.create_index('ix_memorial_slug_public', 'memorials', ['unique_slug', 'is_public'], unique=False, postgresql_where='unique_slug IS NOT NULL')
    op.create_index('ix_memorial_yahrzeit', 'memorials', ['next_yahrzeit_gregorian'], unique=False, postgresql_where='next_yahrzeit_gregorian IS NOT NULL')
    op.create_index(op.f('ix_memorials_created_at'), 'memorials', ['created_at'], unique=False)
    op.create_index(op.f('ix_memorials_id'), 'memorials', ['id'], unique=False)
    op.create_index(op.f('ix_memorials_is_deleted'), 'memorials', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_memorials_is_locked'), 'memorials', ['is_locked'], unique=False)
    op.create_index(op.f('ix_memorials_is_public'), 'memorials', ['is_public'], unique=False)
    op.create_index(op.f('ix_memorials_next_yahrzeit_gregorian'), 'memorials', ['next_yahrzeit_gregorian'], unique=False)
    op.create_index(op.f('ix_memorials_owner_id'), 'memorials', ['owner_id'], unique=False)
    op.create_index(op.f('ix_memorials_unique_slug'), 'memorials', ['unique_slug'], unique=True)
    op.create_index(op.f('ix_memorials_updated_at'), 'memorials', ['updated_at'], unique=False)
    op.create_table('contacts',
    sa.Column('memorial_id', sa.UUID(), nullable=False, comment='ID of the memorial this contact belongs to'),
    sa.Column('contact_type', sa.Enum('EMAIL', 'WHATSAPP', name='contacttype'), nullable=False, comment='Type of contact (email or whatsapp)'),
    sa.Column('contact_value', sa.String(length=255), nullable=False, comment='Email address or phone number'),
    sa.Column('contact_name', sa.String(length=100), nullable=False, comment='Name of the contact person'),
    sa.Column('relationship_to_deceased', sa.String(length=100), nullable=True, comment='Relationship to the deceased (son, daughter, friend, etc.)'),
    sa.Column('notification_enabled', sa.Boolean(), nullable=False, comment='Whether notifications are enabled for this contact'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether the contact has been verified (clicked confirmation link)'),
    sa.Column('verification_token', sa.String(length=255), nullable=True, comment='Token for contact verification'),
    sa.Column('verification_sent_at', sa.DateTime(), nullable=True, comment='When the verification message was sent'),
    sa.Column('verified_at', sa.DateTime(), nullable=True, comment='When the contact was verified'),
    sa.Column('yahrzeit_reminder_enabled', sa.Boolean(), nullable=False, comment='Whether to send yahrzeit reminders'),
    sa.Column('yahrzeit_reminder_days_before', sa.Integer(), nullable=False, comment='How many days before yahrzeit to send reminder'),
    sa.Column('memorial_updates_enabled', sa.Boolean(), nullable=False, comment='Whether to send memorial update notifications'),
    sa.Column('last_notification_sent_at', sa.DateTime(), nullable=True, comment='When the last notification was sent to this contact'),
    sa.Column('notification_count', sa.Integer(), nullable=False, comment='Total number of notifications sent to this contact'),
    sa.Column('bounce_count', sa.Integer(), nullable=False, comment='Number of bounced/failed notifications'),
    sa.Column('last_bounce_at', sa.DateTime(), nullable=True, comment='When the last bounce occurred'),
    sa.Column('is_bouncing', sa.Boolean(), nullable=False, comment='Whether this contact is currently bouncing (too many failures)'),
    sa.Column('added_by_user_id', sa.UUID(), nullable=True, comment='ID of the user who added this contact'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.CheckConstraint('bounce_count >= 0', name='ck_contact_bounce_count_non_negative'),
    sa.CheckConstraint('notification_count >= 0', name='ck_contact_notification_count_non_negative'),
    sa.CheckConstraint('yahrzeit_reminder_days_before >= 0 AND yahrzeit_reminder_days_before <= 30', name='ck_contact_reminder_days_range'),
    sa.ForeignKeyConstraint(['added_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['memorial_id'], ['memorials.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('verification_token')
    )
    op.create_index('ix_contact_bouncing', 'contacts', ['is_bouncing', 'bounce_count'], unique=False)
    op.create_index('ix_contact_memorial_enabled', 'contacts', ['memorial_id', 'notification_enabled'], unique=False)
    op.create_index('ix_contact_memorial_type', 'contacts', ['memorial_id', 'contact_type'], unique=False)
    op.create_index('ix_contact_memorial_value_unique', 'contacts', ['memorial_id', 'contact_value'], unique=True, postgresql_where='is_deleted = false')
    op.create_index('ix_contact_memorial_verified', 'contacts', ['memorial_id', 'is_verified'], unique=False)
    op.create_index('ix_contact_type_value', 'contacts', ['contact_type', 'contact_value'], unique=False)
    op.create_index('ix_contact_verification', 'contacts', ['verification_token'], unique=True, postgresql_where='verification_token IS NOT NULL')
    op.create_index(op.f('ix_contacts_contact_type'), 'contacts', ['contact_type'], unique=False)
    op.create_index(op.f('ix_contacts_created_at'), 'contacts', ['created_at'], unique=False)
    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)
    op.create_index(op.f('ix_contacts_is_bouncing'), 'contacts', ['is_bouncing'], unique=False)
    op.create_index(op.f('ix_contacts_is_deleted'), 'contacts', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_contacts_is_verified'), 'contacts', ['is_verified'], unique=False)
    op.create_index(op.f('ix_contacts_memorial_id'), 'contacts', ['memorial_id'], unique=False)
    op.create_index(op.f('ix_contacts_notification_enabled'), 'contacts', ['notification_enabled'], unique=False)
    op.create_index(op.f('ix_contacts_updated_at'), 'contacts', ['updated_at'], unique=False)
    op.create_table('locations',
    sa.Column('memorial_id', sa.UUID(), nullable=False, comment='ID of the memorial this location belongs to'),
    sa.Column('cemetery_name', sa.String(length=200), nullable=False, comment='Name of the cemetery or burial ground'),
    sa.Column('cemetery_address', sa.String(length=500), nullable=True, comment='Full address of the cemetery'),
    sa.Column('cemetery_city', sa.String(length=100), nullable=True, comment='City where the cemetery is located'),
    sa.Column('cemetery_country', sa.String(length=100), nullable=True, comment='Country where the cemetery is located'),
    sa.Column('section', sa.String(length=100), nullable=True, comment='Section or area within the cemetery'),
    sa.Column('row', sa.String(length=50), nullable=True, comment='Row identifier within the section'),
    sa.Column('plot', sa.String(length=50), nullable=True, comment='Specific plot or grave number'),
    sa.Column('block', sa.String(length=50), nullable=True, comment='Block identifier (if applicable)'),
    sa.Column('gps_latitude', sa.Numeric(precision=10, scale=7), nullable=True, comment='GPS latitude coordinate (decimal degrees)'),
    sa.Column('gps_longitude', sa.Numeric(precision=10, scale=7), nullable=True, comment='GPS longitude coordinate (decimal degrees)'),
    sa.Column('gps_accuracy_meters', sa.Integer(), nullable=True, comment='GPS accuracy in meters'),
    sa.Column('directions_text', sa.Text(), nullable=True, comment='Written directions to find the grave'),
    sa.Column('directions_video_url', sa.String(length=500), nullable=True, comment='URL to a video showing directions to the grave'),
    sa.Column('landmark_description', sa.Text(), nullable=True, comment='Description of nearby landmarks or distinctive features'),
    sa.Column('grave_type', sa.String(length=50), nullable=True, comment='Type of grave (burial, mausoleum, columbarium, etc.)'),
    sa.Column('headstone_description', sa.Text(), nullable=True, comment='Description of the headstone or marker'),
    sa.Column('headstone_inscription', sa.Text(), nullable=True, comment='Text inscription on the headstone'),
    sa.Column('burial_permit_number', sa.String(length=100), nullable=True, comment='Official burial permit or certificate number'),
    sa.Column('plot_deed_number', sa.String(length=100), nullable=True, comment='Plot deed or ownership document number'),
    sa.Column('last_updated_at', sa.DateTime(timezone=True), nullable=False, comment='When the location information was last updated'),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True, comment='When the location was last physically verified'),
    sa.Column('verified_by_user_id', sa.UUID(), nullable=True, comment='ID of the user who verified this location'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.CheckConstraint('gps_accuracy_meters > 0', name='ck_location_gps_accuracy_positive'),
    sa.CheckConstraint('gps_latitude >= -90 AND gps_latitude <= 90', name='ck_location_latitude_range'),
    sa.CheckConstraint('gps_longitude >= -180 AND gps_longitude <= 180', name='ck_location_longitude_range'),
    sa.ForeignKeyConstraint(['memorial_id'], ['memorials.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['verified_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_location_cemetery_city', 'locations', ['cemetery_city'], unique=False)
    op.create_index('ix_location_cemetery_name', 'locations', ['cemetery_name'], unique=False)
    op.create_index('ix_location_gps_coordinates', 'locations', ['gps_latitude', 'gps_longitude'], unique=False, postgresql_where='gps_latitude IS NOT NULL AND gps_longitude IS NOT NULL')
    op.create_index('ix_location_last_updated', 'locations', ['last_updated_at'], unique=False)
    op.create_index('ix_location_plot_info', 'locations', ['section', 'row', 'plot'], unique=False)
    op.create_index('ix_location_verification', 'locations', ['verified_at', 'verified_by_user_id'], unique=False)
    op.create_index(op.f('ix_locations_cemetery_name'), 'locations', ['cemetery_name'], unique=False)
    op.create_index(op.f('ix_locations_created_at'), 'locations', ['created_at'], unique=False)
    op.create_index(op.f('ix_locations_id'), 'locations', ['id'], unique=False)
    op.create_index(op.f('ix_locations_is_deleted'), 'locations', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_locations_memorial_id'), 'locations', ['memorial_id'], unique=True)
    op.create_index(op.f('ix_locations_updated_at'), 'locations', ['updated_at'], unique=False)
    op.create_table('memorial_psalm_verses',
    sa.Column('memorial_id', sa.UUID(), nullable=False),
    sa.Column('psalm_verse_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['memorial_id'], ['memorials.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['psalm_verse_id'], ['psalm_verses.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('memorial_id', 'psalm_verse_id'),
    comment='Association table linking memorials to psalm verses'
    )
    op.create_table('photos',
    sa.Column('memorial_id', sa.UUID(), nullable=False, comment='ID of the memorial this photo belongs to'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='Local file system path to the photo'),
    sa.Column('file_url', sa.String(length=500), nullable=True, comment='Public URL to access the photo (CDN or static URL)'),
    sa.Column('original_filename', sa.String(length=255), nullable=False, comment='Original filename when uploaded'),
    sa.Column('caption', sa.String(length=500), nullable=True, comment='Optional caption or description for the photo'),
    sa.Column('display_order', sa.Integer(), nullable=False, comment='Display order for photos (1-4)'),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='File size in bytes'),
    sa.Column('mime_type', sa.String(length=100), nullable=True, comment='MIME type of the photo (image/jpeg, image/png, etc.)'),
    sa.Column('width', sa.Integer(), nullable=True, comment='Image width in pixels'),
    sa.Column('height', sa.Integer(), nullable=True, comment='Image height in pixels'),
    sa.Column('is_primary', sa.Boolean(), nullable=False, comment='Whether this is the primary/main photo for the memorial'),
    sa.Column('is_approved', sa.Boolean(), nullable=False, comment='Whether the photo is approved for display (content moderation)'),
    sa.Column('uploaded_by_user_id', sa.UUID(), nullable=True, comment='ID of the user who uploaded this photo'),
    sa.Column('uploaded_at', sa.DateTime(), nullable=False, comment='When the photo was uploaded'),
    sa.Column('is_processed', sa.Boolean(), nullable=False, comment='Whether the photo has been processed (resized, optimized, etc.)'),
    sa.Column('processing_error', sa.String(length=500), nullable=True, comment='Error message if photo processing failed'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.CheckConstraint('display_order >= 1 AND display_order <= 4', name='ck_photo_display_order_range'),
    sa.CheckConstraint('file_size > 0', name='ck_photo_file_size_positive'),
    sa.CheckConstraint('width > 0 AND height > 0', name='ck_photo_dimensions_positive'),
    sa.ForeignKeyConstraint(['memorial_id'], ['memorials.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_photo_memorial_approved', 'photos', ['memorial_id', 'is_approved'], unique=False)
    op.create_index('ix_photo_memorial_display_order_unique', 'photos', ['memorial_id', 'display_order'], unique=True, postgresql_where='is_deleted = false')
    op.create_index('ix_photo_memorial_order', 'photos', ['memorial_id', 'display_order'], unique=False)
    op.create_index('ix_photo_memorial_primary', 'photos', ['memorial_id', 'is_primary'], unique=False)
    op.create_index('ix_photo_memorial_primary_unique', 'photos', ['memorial_id'], unique=True, postgresql_where='is_primary = true AND is_deleted = false')
    op.create_index('ix_photo_processing', 'photos', ['is_processed', 'processing_error'], unique=False, postgresql_where='is_processed = false')
    op.create_index('ix_photo_upload_date', 'photos', ['uploaded_at'], unique=False)
    op.create_index(op.f('ix_photos_created_at'), 'photos', ['created_at'], unique=False)
    op.create_index(op.f('ix_photos_id'), 'photos', ['id'], unique=False)
    op.create_index(op.f('ix_photos_is_approved'), 'photos', ['is_approved'], unique=False)
    op.create_index(op.f('ix_photos_is_deleted'), 'photos', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_photos_is_primary'), 'photos', ['is_primary'], unique=False)
    op.create_index(op.f('ix_photos_memorial_id'), 'photos', ['memorial_id'], unique=False)
    op.create_index(op.f('ix_photos_updated_at'), 'photos', ['updated_at'], unique=False)
    op.create_table('notifications',
    sa.Column('memorial_id', sa.UUID(), nullable=True, comment='ID of the memorial this notification relates to (optional for system notifications)'),
    sa.Column('contact_id', sa.UUID(), nullable=True, comment='ID of the specific contact to notify (optional for broadcast notifications)'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='ID of the user this notification is for (optional)'),
    sa.Column('notification_type', sa.Enum('YAHRZEIT_REMINDER', 'MEMORIAL_UPDATE', 'SYSTEM', 'WELCOME', 'VERIFICATION_REMINDER', name='notificationtype'), nullable=False, comment='Type of notification'),
    sa.Column('status', sa.Enum('PENDING', 'SCHEDULED', 'SENT', 'FAILED', 'CANCELLED', 'RETRY', name='notificationstatus'), nullable=False, comment='Current status of the notification'),
    sa.Column('scheduled_date', sa.Date(), nullable=True, comment='Date when the notification should be sent'),
    sa.Column('scheduled_time', sa.DateTime(timezone=True), nullable=True, comment='Specific time when notification should be sent'),
    sa.Column('sent_date', sa.DateTime(timezone=True), nullable=True, comment='When the notification was actually sent'),
    sa.Column('delivered_date', sa.DateTime(timezone=True), nullable=True, comment='When the notification was delivered (if tracking available)'),
    sa.Column('opened_date', sa.DateTime(timezone=True), nullable=True, comment='When the notification was opened (if tracking available)'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts made'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum number of retry attempts allowed'),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True, comment='When the next retry should be attempted'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if notification failed'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='Error code for categorizing failures'),
    sa.Column('subject', sa.String(length=500), nullable=True, comment='Subject line for email notifications'),
    sa.Column('content', sa.JSON(), nullable=True, comment='Notification content as JSON (templates, variables, etc.)'),
    sa.Column('template_name', sa.String(length=100), nullable=True, comment='Name of the template to use for rendering'),
    sa.Column('delivery_channel', sa.String(length=20), nullable=True, comment='Channel used for delivery (email, whatsapp, etc.)'),
    sa.Column('external_id', sa.String(length=255), nullable=True, comment='External service ID for tracking (SendGrid message ID, etc.)'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Priority level (1=highest, 10=lowest)'),
    sa.Column('batch_id', sa.String(length=100), nullable=True, comment='ID for grouping notifications into batches'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag - true if record is logically deleted'),
    sa.CheckConstraint('max_retries >= 0', name='ck_notification_max_retries_non_negative'),
    sa.CheckConstraint('priority >= 1 AND priority <= 10', name='ck_notification_priority_range'),
    sa.CheckConstraint('retry_count >= 0', name='ck_notification_retry_count_non_negative'),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['memorial_id'], ['memorials.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_notification_batch', 'notifications', ['batch_id', 'status'], unique=False)
    op.create_index('ix_notification_contact_status', 'notifications', ['contact_id', 'status'], unique=False)
    op.create_index('ix_notification_delivery_tracking', 'notifications', ['sent_date', 'delivered_date', 'opened_date'], unique=False)
    op.create_index('ix_notification_memorial_type', 'notifications', ['memorial_id', 'notification_type'], unique=False)
    op.create_index('ix_notification_priority_pending', 'notifications', ['priority', 'created_at'], unique=False, postgresql_where="status IN ('pending', 'scheduled')")
    op.create_index('ix_notification_retry', 'notifications', ['status', 'next_retry_at'], unique=False, postgresql_where="status = 'retry'")
    op.create_index('ix_notification_scheduled', 'notifications', ['scheduled_date', 'scheduled_time'], unique=False, postgresql_where="status IN ('pending', 'scheduled')")
    op.create_index('ix_notification_status_type', 'notifications', ['status', 'notification_type'], unique=False)
    op.create_index('ix_notification_user_type', 'notifications', ['user_id', 'notification_type'], unique=False)
    op.create_index(op.f('ix_notifications_batch_id'), 'notifications', ['batch_id'], unique=False)
    op.create_index(op.f('ix_notifications_contact_id'), 'notifications', ['contact_id'], unique=False)
    op.create_index(op.f('ix_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.create_index(op.f('ix_notifications_is_deleted'), 'notifications', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_notifications_memorial_id'), 'notifications', ['memorial_id'], unique=False)
    op.create_index(op.f('ix_notifications_next_retry_at'), 'notifications', ['next_retry_at'], unique=False)
    op.create_index(op.f('ix_notifications_notification_type'), 'notifications', ['notification_type'], unique=False)
    op.create_index(op.f('ix_notifications_scheduled_date'), 'notifications', ['scheduled_date'], unique=False)
    op.create_index(op.f('ix_notifications_scheduled_time'), 'notifications', ['scheduled_time'], unique=False)
    op.create_index(op.f('ix_notifications_status'), 'notifications', ['status'], unique=False)
    op.create_index(op.f('ix_notifications_updated_at'), 'notifications', ['updated_at'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_updated_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_status'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_scheduled_time'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_scheduled_date'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_notification_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_next_retry_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_memorial_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_deleted'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_created_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_contact_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_batch_id'), table_name='notifications')
    op.drop_index('ix_notification_user_type', table_name='notifications')
    op.drop_index('ix_notification_status_type', table_name='notifications')
    op.drop_index('ix_notification_scheduled', table_name='notifications', postgresql_where="status IN ('pending', 'scheduled')")
    op.drop_index('ix_notification_retry', table_name='notifications', postgresql_where="status = 'retry'")
    op.drop_index('ix_notification_priority_pending', table_name='notifications', postgresql_where="status IN ('pending', 'scheduled')")
    op.drop_index('ix_notification_memorial_type', table_name='notifications')
    op.drop_index('ix_notification_delivery_tracking', table_name='notifications')
    op.drop_index('ix_notification_contact_status', table_name='notifications')
    op.drop_index('ix_notification_batch', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_photos_updated_at'), table_name='photos')
    op.drop_index(op.f('ix_photos_memorial_id'), table_name='photos')
    op.drop_index(op.f('ix_photos_is_primary'), table_name='photos')
    op.drop_index(op.f('ix_photos_is_deleted'), table_name='photos')
    op.drop_index(op.f('ix_photos_is_approved'), table_name='photos')
    op.drop_index(op.f('ix_photos_id'), table_name='photos')
    op.drop_index(op.f('ix_photos_created_at'), table_name='photos')
    op.drop_index('ix_photo_upload_date', table_name='photos')
    op.drop_index('ix_photo_processing', table_name='photos', postgresql_where='is_processed = false')
    op.drop_index('ix_photo_memorial_primary_unique', table_name='photos', postgresql_where='is_primary = true AND is_deleted = false')
    op.drop_index('ix_photo_memorial_primary', table_name='photos')
    op.drop_index('ix_photo_memorial_order', table_name='photos')
    op.drop_index('ix_photo_memorial_display_order_unique', table_name='photos', postgresql_where='is_deleted = false')
    op.drop_index('ix_photo_memorial_approved', table_name='photos')
    op.drop_table('photos')
    op.drop_table('memorial_psalm_verses')
    op.drop_index(op.f('ix_locations_updated_at'), table_name='locations')
    op.drop_index(op.f('ix_locations_memorial_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_is_deleted'), table_name='locations')
    op.drop_index(op.f('ix_locations_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_created_at'), table_name='locations')
    op.drop_index(op.f('ix_locations_cemetery_name'), table_name='locations')
    op.drop_index('ix_location_verification', table_name='locations')
    op.drop_index('ix_location_plot_info', table_name='locations')
    op.drop_index('ix_location_last_updated', table_name='locations')
    op.drop_index('ix_location_gps_coordinates', table_name='locations', postgresql_where='gps_latitude IS NOT NULL AND gps_longitude IS NOT NULL')
    op.drop_index('ix_location_cemetery_name', table_name='locations')
    op.drop_index('ix_location_cemetery_city', table_name='locations')
    op.drop_table('locations')
    op.drop_index(op.f('ix_contacts_updated_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_notification_enabled'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_memorial_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_is_verified'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_is_deleted'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_is_bouncing'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_created_at'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_contact_type'), table_name='contacts')
    op.drop_index('ix_contact_verification', table_name='contacts', postgresql_where='verification_token IS NOT NULL')
    op.drop_index('ix_contact_type_value', table_name='contacts')
    op.drop_index('ix_contact_memorial_verified', table_name='contacts')
    op.drop_index('ix_contact_memorial_value_unique', table_name='contacts', postgresql_where='is_deleted = false')
    op.drop_index('ix_contact_memorial_type', table_name='contacts')
    op.drop_index('ix_contact_memorial_enabled', table_name='contacts')
    op.drop_index('ix_contact_bouncing', table_name='contacts')
    op.drop_table('contacts')
    op.drop_index(op.f('ix_memorials_updated_at'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_unique_slug'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_owner_id'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_next_yahrzeit_gregorian'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_is_public'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_is_locked'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_is_deleted'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_id'), table_name='memorials')
    op.drop_index(op.f('ix_memorials_created_at'), table_name='memorials')
    op.drop_index('ix_memorial_yahrzeit', table_name='memorials', postgresql_where='next_yahrzeit_gregorian IS NOT NULL')
    op.drop_index('ix_memorial_slug_public', table_name='memorials', postgresql_where='unique_slug IS NOT NULL')
    op.drop_index('ix_memorial_owner_public', table_name='memorials')
    op.drop_index('ix_memorial_name_search', table_name='memorials')
    op.drop_index('ix_memorial_death_date', table_name='memorials', postgresql_where='death_date_gregorian IS NOT NULL')
    op.drop_table('memorials')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_subscription_status'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_is_verified'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('ix_user_verification_token', table_name='users', postgresql_where='verification_token IS NOT NULL')
    op.drop_index('ix_user_subscription_status', table_name='users')
    op.drop_index('ix_user_role_active', table_name='users')
    op.drop_index('ix_user_reset_token', table_name='users', postgresql_where='reset_password_token IS NOT NULL')
    op.drop_index('ix_user_email_active', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_psalm_verses_verse_number'), table_name='psalm_verses')
    op.drop_index(op.f('ix_psalm_verses_updated_at'), table_name='psalm_verses')
    op.drop_index(op.f('ix_psalm_verses_is_deleted'), table_name='psalm_verses')
    op.drop_index(op.f('ix_psalm_verses_hebrew_letter_name'), table_name='psalm_verses')
    op.drop_index(op.f('ix_psalm_verses_hebrew_letter'), table_name='psalm_verses')
    op.drop_index(op.f('ix_psalm_verses_created_at'), table_name='psalm_verses')
    op.drop_index('ix_psalm_verse_number', table_name='psalm_verses')
    op.drop_index('ix_psalm_usage_count', table_name='psalm_verses')
    op.drop_index('ix_psalm_themes', table_name='psalm_verses', postgresql_using='gin', postgresql_ops={'themes': 'gin_trgm_ops'})
    op.drop_index('ix_psalm_letter_name', table_name='psalm_verses')
    op.drop_index('ix_psalm_keywords', table_name='psalm_verses', postgresql_using='gin', postgresql_ops={'keywords': 'gin_trgm_ops'})
    op.drop_index('ix_psalm_hebrew_text_search', table_name='psalm_verses', postgresql_using='gin', postgresql_ops={'verse_text_hebrew': 'gin_trgm_ops'})
    op.drop_index('ix_psalm_hebrew_letter', table_name='psalm_verses')
    op.drop_index('ix_psalm_english_text_search', table_name='psalm_verses', postgresql_using='gin', postgresql_ops={'verse_text_english': 'gin_trgm_ops'})
    op.drop_table('psalm_verses')
    # ### end Alembic commands ###