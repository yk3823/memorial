"""
Coupon model for manual office payments in Memorial Website.
Handles coupon creation, validation, and usage tracking for manual payments.
"""

import enum
import uuid
from datetime import datetime
from typing import Optional, List
from decimal import Decimal

from sqlalchemy import String, Boolean, DateTime, Numeric, ForeignKey, Index, Text, CheckConstraint
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.hybrid import hybrid_property

from .base import BaseModel


class CouponStatus(enum.Enum):
    """Coupon status enumeration."""
    ACTIVE = "active"
    USED = "used"
    EXPIRED = "expired"
    REVOKED = "revoked"


class Coupon(BaseModel):
    """
    Coupon model for manual office payment handling.
    
    Enables office staff to create coupons for customers who paid manually,
    providing a secure way to validate payments without exposing sensitive data.
    """
    
    __tablename__ = "coupons"
    
    # Unique coupon code
    code: Mapped[str] = mapped_column(
        String(100),
        unique=True,
        nullable=False,
        index=True,
        comment="Unique coupon code generated by system"
    )
    
    # Customer information
    customer_name: Mapped[str] = mapped_column(
        String(255),
        nullable=False,
        comment="Name of customer who made the manual payment"
    )
    
    customer_email: Mapped[Optional[str]] = mapped_column(
        String(255),
        nullable=True,
        comment="Email of customer (optional for validation)"
    )
    
    # Payment details
    payment_amount: Mapped[Decimal] = mapped_column(
        Numeric(10, 2),
        nullable=False,
        comment="Amount that was paid manually"
    )
    
    currency: Mapped[str] = mapped_column(
        String(3),
        nullable=False,
        default="ILS",
        comment="Currency of the manual payment"
    )
    
    # Usage tracking
    is_used: Mapped[bool] = mapped_column(
        Boolean,
        default=False,
        nullable=False,
        index=True,
        comment="Whether this coupon has been used"
    )
    
    status: Mapped[str] = mapped_column(
        String(20),
        default="active",
        nullable=False,
        index=True,
        comment="Current status of the coupon"
    )
    
    # Creation tracking
    created_by_admin_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="SET NULL"),
        nullable=False,
        index=True,
        comment="ID of admin who created this coupon"
    )
    
    # Usage tracking
    used_by_user_id: Mapped[Optional[uuid.UUID]] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="SET NULL"),
        nullable=True,
        index=True,
        comment="ID of user who used this coupon"
    )
    
    used_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True,
        comment="When the coupon was used"
    )
    
    # Expiration
    expires_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True,
        comment="When the coupon expires (optional)"
    )
    
    # Audit information
    office_payment_reference: Mapped[Optional[str]] = mapped_column(
        String(100),
        nullable=True,
        comment="Reference number for the manual payment (receipt, etc.)"
    )
    
    notes: Mapped[Optional[str]] = mapped_column(
        Text,
        nullable=True,
        comment="Additional notes from admin who created the coupon"
    )
    
    # Subscription configuration
    subscription_months: Mapped[int] = mapped_column(
        nullable=False,
        default=1,
        comment="Number of subscription months this coupon grants"
    )
    
    max_memorials_granted: Mapped[int] = mapped_column(
        nullable=False,
        default=1,
        comment="Number of memorials this coupon grants"
    )
    
    # Validation metadata
    validation_ip: Mapped[Optional[str]] = mapped_column(
        String(45),
        nullable=True,
        comment="IP address where coupon was validated"
    )
    
    validation_user_agent: Mapped[Optional[str]] = mapped_column(
        Text,
        nullable=True,
        comment="User agent when coupon was validated"
    )
    
    # Relationships
    created_by_admin: Mapped["User"] = relationship(
        "User",
        foreign_keys=[created_by_admin_id],
        back_populates="created_coupons",
        lazy="select"
    )
    
    used_by_user: Mapped[Optional["User"]] = relationship(
        "User",
        foreign_keys=[used_by_user_id],
        back_populates="used_coupons",
        lazy="select"
    )
    
    # Database constraints and indexes
    __table_args__ = (
        Index("ix_coupon_status_created", "status", "created_at"),
        Index("ix_coupon_customer_name", "customer_name"),
        Index("ix_coupon_used_status", "is_used", "status"),
        Index("ix_coupon_expires_status", "expires_at", "status"),
        CheckConstraint(
            "payment_amount > 0",
            name="ck_coupon_payment_amount_positive"
        ),
        CheckConstraint(
            "subscription_months > 0",
            name="ck_coupon_subscription_months_positive"
        ),
        CheckConstraint(
            "max_memorials_granted > 0",
            name="ck_coupon_memorials_positive"
        ),
    )
    
    # Coupon status management methods
    def is_valid(self) -> bool:
        """
        Check if coupon is valid for use.
        
        Returns:
            bool: True if coupon can be used
        """
        if self.is_used or self.status != CouponStatus.ACTIVE.value:
            return False
            
        # Check expiration
        if self.expires_at and datetime.utcnow() > self.expires_at:
            return False
            
        return True
    
    def mark_as_used(
        self,
        user_id: uuid.UUID,
        validation_ip: str = None,
        validation_user_agent: str = None
    ) -> None:
        """
        Mark coupon as used by a specific user.
        
        Args:
            user_id: ID of user who used the coupon
            validation_ip: IP address where validation occurred
            validation_user_agent: User agent when validation occurred
        """
        self.is_used = True
        self.status = CouponStatus.USED.value
        self.used_by_user_id = user_id
        self.used_at = datetime.utcnow()
        
        if validation_ip:
            self.validation_ip = validation_ip
        if validation_user_agent:
            self.validation_user_agent = validation_user_agent
    
    def revoke(self, reason: str = None) -> None:
        """
        Revoke the coupon, making it invalid.
        
        Args:
            reason: Optional reason for revocation
        """
        self.status = CouponStatus.REVOKED.value
        if reason and self.notes:
            self.notes += f"\n[REVOKED] {reason}"
        elif reason:
            self.notes = f"[REVOKED] {reason}"
    
    def expire(self) -> None:
        """Mark coupon as expired."""
        self.status = CouponStatus.EXPIRED.value
    
    def is_expired(self) -> bool:
        """Check if coupon is expired based on expiration date."""
        if not self.expires_at:
            return False
        return datetime.utcnow() > self.expires_at
    
    def can_be_used_by(self, customer_name: str, customer_email: str = None) -> bool:
        """
        Check if coupon can be used by specific customer.
        
        Args:
            customer_name: Customer name to validate against
            customer_email: Customer email to validate against (optional)
            
        Returns:
            bool: True if customer can use this coupon
        """
        if not self.is_valid():
            return False
        
        # Check customer name match (case insensitive)
        name_match = self.customer_name.lower().strip() == customer_name.lower().strip()
        
        # If email is provided and stored, validate it too
        if self.customer_email and customer_email:
            email_match = self.customer_email.lower().strip() == customer_email.lower().strip()
            return name_match and email_match
        
        return name_match
    
    # Computed properties
    @property
    def formatted_amount(self) -> str:
        """Get formatted payment amount with currency."""
        if self.currency == "ILS":
            return f"₪{self.payment_amount:,.2f}"
        elif self.currency == "USD":
            return f"${self.payment_amount:,.2f}"
        elif self.currency == "EUR":
            return f"€{self.payment_amount:,.2f}"
        else:
            return f"{self.payment_amount:,.2f} {self.currency}"
    
    @property
    def display_status(self) -> str:
        """Get user-friendly status display in Hebrew."""
        status_map = {
            CouponStatus.ACTIVE.value: "פעיל",
            CouponStatus.USED.value: "נוצל",
            CouponStatus.EXPIRED.value: "פג תוקף",
            CouponStatus.REVOKED.value: "בוטל"
        }
        return status_map.get(self.status, self.status)
    
    @property
    def age_in_days(self) -> int:
        """Get age of coupon in days."""
        return (datetime.utcnow() - self.created_at).days
    
    @property
    def is_recent(self) -> bool:
        """Check if coupon was created recently (within 30 days)."""
        return self.age_in_days <= 30
    
    def __repr__(self) -> str:
        """String representation of coupon."""
        return f"<Coupon(code={self.code}, customer={self.customer_name}, status={self.status})>"
    
    def to_dict(self, include_sensitive: bool = False, for_admin: bool = False) -> dict:
        """
        Convert coupon to dictionary.
        
        Args:
            include_sensitive: Whether to include sensitive data like full code
            for_admin: Whether this is for admin view (includes more fields)
            
        Returns:
            dict: Coupon data dictionary
        """
        data = super().to_dict()
        
        if not include_sensitive and not for_admin:
            # For public use - mask the coupon code except for last 4 characters
            if len(self.code) > 8:
                data['code'] = f"****{self.code[-4:]}"
            
            # Remove admin-only fields
            admin_fields = [
                'created_by_admin_id',
                'office_payment_reference',
                'notes',
                'validation_ip',
                'validation_user_agent'
            ]
            for field in admin_fields:
                data.pop(field, None)
        
        # Add computed properties
        data['formatted_amount'] = self.formatted_amount
        data['display_status'] = self.display_status
        data['age_in_days'] = self.age_in_days
        data['is_recent'] = self.is_recent
        data['is_valid'] = self.is_valid()
        data['is_expired'] = self.is_expired()
        
        return data
    
    def to_admin_dict(self) -> dict:
        """Get full coupon data for admin interface."""
        return self.to_dict(include_sensitive=True, for_admin=True)


# Helper function to update User model with coupon relationships
def add_coupon_relationships_to_user():
    """
    Documentation for relationships to add to User model:
    
    Add these to User model relationships section:
    
    # Coupon relationships
    created_coupons: Mapped[List["Coupon"]] = relationship(
        "Coupon",
        foreign_keys="Coupon.created_by_admin_id",
        back_populates="created_by_admin",
        lazy="select",
        cascade="all, delete-orphan"
    )
    
    used_coupons: Mapped[List["Coupon"]] = relationship(
        "Coupon", 
        foreign_keys="Coupon.used_by_user_id",
        back_populates="used_by_user",
        lazy="select"
    )
    """
    pass